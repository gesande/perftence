import org.gradle.api.tasks.GradleBuild;

ext.buildScripts="$projectDir/build"
ext.buildTemplates="$buildScripts/template"
ext.buildPlugins="$buildScripts/plugins/"
ext.libraryPlugin="$buildPlugins/library.gradle"
ext.tmpDir="$projectDir/tmp"
ext.reportDir="$projectDir/tmp"
ext.emmaPlugin="$buildPlugins/emma.gradle"
ext.distributionPlugin="$buildPlugins/distribution.gradle"
ext.distributionDir="$tmpDir"
ext.toolsDir="$projectDir/tools"
ext.repositoryDir="$projectDir/repository"

ext.artifactVersion='1.0-BETA'

apply from: "$buildPlugins/repositories.gradle"
apply from: "$buildPlugins/reporting.gradle"
apply from: "$buildPlugins/deployment.gradle"
apply from: "$buildPlugins/artifact.gradle"
apply from: "$buildPlugins/environment.gradle"

subprojects {
    apply from: "$buildPlugins/continous.gradle"
    apply from: "$buildPlugins/codeAnalysis.gradle"

    version = "$artifactVersion"

    task "showVersion" { doLast {  println version } }

    task "init-libs" << { task ->
        def libDir = new File(task.project.projectDir, 'lib')
        libDir.mkdirs()
        def libSourcesDir = new File(task.project.projectDir, 'lib-sources')
        libSourcesDir.mkdirs()
    }
}

task continousBuild(type: GradleBuild, dependsOn: ['buildclean']) { Task task ->
    group = 'Verification'
    description ='Continous build for the whole thing.'
    buildFile = 'build.gradle'
    tasks << 'perftence-concurrent:continous'
    tasks << 'perftence-bag:continous'
    tasks << 'perftence-linereader:continous'
    tasks << 'perftence-fileutil:continous'
    tasks << 'perftence-junit-utils:continous'
    tasks << 'perftence-classhelper:continous'
    tasks << 'perftence:continous'
    tasks << 'perftence-api:continous'
    tasks << 'responsecode-summaryappender:continous'
    tasks << 'perftence-junit:continous'
    tasks << 'acceptance-tests:test'
    tasks << 'aggregateTestReport'

    tasks << 'aggregateJDependReport'
    tasks << 'aggregateEmmaReport'
    tasks << 'aggregateFindbugsReport'

    doLast { println "Continous build passed, good work!" }
}

task distributionPackage(type: GradleBuild, dependsOn: ['continousBuild']) { Task task ->
    group = 'Distribution'
    description = 'Distribution package for the whole thing including continous build.'
    buildFile = 'build.gradle'
    tasks << 'clean'
    tasks << 'perftence-concurrent:release'
    tasks << 'perftence-bag:release'
    tasks << 'perftence-api:release'
    tasks << 'perftence-junit-utils:release'
    tasks << 'perftence-classhelper:release'
    tasks << 'perftence-linereader:release'
    tasks << 'perftence-fileutil:release'
    tasks << 'perftence:release'
    tasks << 'responsecode-summaryappender:release'
    tasks << 'perftence-junit:release'
    tasks << 'makeDistributionPackage'

    doLast { println "Distribution package ready to be uploaded to the repository." }
}

task buildEclipseSettings(type: GradleBuild) { Task task ->
    group = 'IDE'
    description= 'Build Eclipse settings for all projects.'
    tasks << 'cleanEclipse'
    tasks << 'eclipse'
    doLast { println "Eclipse settings ready. Now import project (without copying them) into Eclipse."  }
}

task buildEclipseSettingsFor(type: GradleBuild) { GradleBuild task ->
    group = 'IDE'
    description = 'Build Eclipse settings for a specific module.'
    println task.hasProperty('settingsFor')
    //  def String module=task.project.settingsFor
    doLast { println "Eclipse settings ready for TODO. Now import the project (without copying it) into Eclipse." }
}

task buildclean(type: GradleBuild) { Task task ->
    buildFile = 'build.gradle'
    tasks << 'clean'
}
