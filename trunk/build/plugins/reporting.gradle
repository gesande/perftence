import static org.gradle.logging.StyledTextOutput.Style

import org.gradle.api.Project
import org.gradle.api.Task
import org.gradle.api.file.FileTree
import org.gradle.logging.StyledTextOutput
import org.gradle.logging.StyledTextOutputFactory


repositories{ mavenCentral() }

configurations { antClasspath }

dependencies { antClasspath 'org.apache.ant:ant-junit:1.8.2' }

task aggregateTestReport {
    group = 'Verification'
    description = "Makes aggregate test report with ant-junit."

    doLast {
        ClassLoader antClassLoader = org.apache.tools.ant.Project.class.classLoader
        configurations.antClasspath.each { File f ->
            antClassLoader.addURL(f.toURI().toURL())
        }
        def targetDir = new File("$reportDir", 'junit')
        targetDir.mkdirs()
        def resultsDir="$reportDir/junit"

        ant.taskdef(
                name: 'junitreport',
                classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
                classpath: configurations.antClasspath.asPath
                )
        ant.junitreport(todir: resultsDir) {
            fileset(dir: "$projectDir", includes: '**/build/test-results/TEST-*.xml')
            report(todir: targetDir, format: "frames")
        }

        def outputFactory = services.get(StyledTextOutputFactory).create("reporting.aggregateTestReport")
        outputFactory.withStyle(Style.Info).println("Aggregate test report can be found from file://$reportDir/junit/index.html")
    }
}

task aggregateEmmaReport { Task task ->
    group = 'Verification'
    description = "Makes aggregate coverage report with emma."
    doLast {
        def targetDir = new File("$reportDir", 'emma')
        targetDir.deleteDir()
        targetDir.mkdirs()
        def List<String> inArgs= new ArrayList<String>()
        def List<String> sourcePathArgs= new ArrayList<String>()
        for (Project sub : task.project.getSubprojects()) {
            def FileTree emmaTree = sub.fileTree('build').include('tmp/emma/metadata.emma').include('tmp/emma/instr/metadata.emma')
            for(File emmaFile : emmaTree.files) {
                inArgs.add("-input")
                inArgs.add(emmaFile)
            }
            def String sourceDir = sub.fileTree("src/main/java").getDir()
            sourcePathArgs.add("-sourcepath")
            sourcePathArgs.add(sourceDir)
        }
        def List<String> arguments = new ArrayList<String>()
        arguments.add("report")
        arguments.add("-report")
        arguments.add("html")
        arguments.addAll(inArgs)
        arguments.addAll(sourcePathArgs)
        arguments.add("-Dreport.out.file=${targetDir}/coverage.html")

        echo 'Creating coverage report...'
        def exit = javaexec {
            classpath "${toolsDir}/emma-2.1.5320-lib/emma.jar"
            main = 'emma'
            args = arguments
        }
        def outputFactory = services.get(StyledTextOutputFactory).create("reporting.aggregateJDependReport")
        outputFactory.withStyle(Style.Info).println("Emma coverage report can be found from file://${targetDir}/coverage.html)")
    }
}

task aggregateJDependReport {
    group = 'Verification'
    description = "Makes aggregate jdepend report with tattletale."
    doLast {
        def targetDir = new File("$reportDir", 'jdepend')
        targetDir.deleteDir()
        targetDir.mkdirs()
        def jarsDir= new File("${reportDir}/analyzed-jars")
        jarsDir.deleteDir()
        jarsDir.mkdirs()
        def FileTree jars = fileTree("$projectDir").include('**/build/libs/*.jar')
        def FileTree libs = fileTree("$projectDir").exclude('tools').include('**/lib/*.jar')
        copy {
            from jars.getFiles() + libs.getFiles()
            into "$jarsDir"
        }
        echo 'Creating JDepend report...'
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                executable = 'java'
                args =[
                    '-Xmx1024m',
                    '-jar',
                    "$toolsDir/tattletale-1.1.2.Final/tattletale.jar",
                    "${jarsDir}",
                    "${targetDir}"
                ]
                standardOutput = os
            }
            def outputFactory = services.get(StyledTextOutputFactory).create("reporting.aggregateJDependReport")
            outputFactory.withStyle(Style.Info).println("JDepend report can be found from file://${targetDir}/index.html)")
        }
    }
}

private void echo(final String msg) {
    println msg
}

