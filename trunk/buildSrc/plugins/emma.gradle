import static org.gradle.logging.StyledTextOutput.Style

import org.gradle.api.Project
import org.gradle.logging.StyledTextOutputFactory


/* Got this originally from https://github.com/breskeby/gradleplugins/blob/master/emmaPlugin/emma.gradle
 * 
 * Changes:
 * - added stylish printing 
 * - checking the coverage 
 * 
 * TODO: try to make this a Project<Plugin> or make this simplier by
 * 
 * taking a look at http://git.springsource.org/spring-security/spring-security/blobs/5fe589e36074d51409c9ad5f87daf6564877534c/gradle/emma.gradle
 */

apply plugin:'java'

configurations{ emma }

dependencies{
    emma "emma:emma:2.1.5320"
    emma "emma:emma_ant:2.1.5320"
}

def emmaConvention = new EmmaPluginConvention(project)
project.convention.plugins.emma = emmaConvention

class EmmaPluginConvention{
    def verbosityLevel = "info"
    def reportPath;
    def coverageFileName;
    def tmpDir;
    def instrDir;
    def metaDataFilePath;

    def emma(Closure close){
        close.delegate = this;
        close.run()
    }

    EmmaPluginConvention(Project project){
        reportPath 			= "${project.reporting.baseDir.absolutePath}/emma"
        coverageFileName	= "coverage"
        tmpDir				= "${project.buildDir}/tmp/emma"
        instrDir			= "${tmpDir}/instr"
        metaDataFilePath 	= "${tmpDir}/metadata.emma"
    }
}

test {
    // add EMMA related JVM args to our tests
    jvmArgs "-XX:-UseSplitVerifier", "-Demma.coverage.out.file=$buildDir/tmp/emma/metadata.emma", "-Demma.coverage.out.merge=true"

    doFirst {
        println "Instrumenting the classes at " + sourceSets.main.output.classesDir.absolutePath
        // define the custom EMMA ant tasks
        ant.taskdef( resource:"emma_ant.properties", classpath: configurations.emma.asPath)

        ant.path(id:"run.classpath") {
            pathelement(location:sourceSets.main.output.classesDir.absolutePath)
        }
        def emmaInstDir = new File(sourceSets.main.output.classesDir.parentFile.parentFile, "tmp/emma/instr")
        emmaInstDir.mkdirs()
        println "Creating $emmaInstDir to instrument from " +       sourceSets.main.output.classesDir.absolutePath
        // instruct our compiled classes and store them at $buildDir/tmp/emma/instr
        ant.emma(enabled: 'true', verbosity:'info'){
            instr(merge:"true", destdir: emmaInstDir.absolutePath, instrpathref:"run.classpath",
            metadatafile: new File(emmaInstDir, '/metadata.emma').absolutePath) {
                instrpath {
                    fileset(dir:sourceSets.main.output.classesDir.absolutePath, includes:"**/*.class")
                }
            }
        }
        setClasspath(files("$buildDir/tmp/emma/instr") + configurations.emma +    getClasspath())
    }

    // The report should be generated directly after the tests are done.
    // We create three types (txt, html, xml) of reports here. Running your build script now should
    // result in output like that:
    doLast {
        def srcDir = sourceSets.main.java.srcDirs.toArray()[0]
        println "Starting to create test coverage reports for classes in " + srcDir
        def emmaInstDir = new File(sourceSets.main.output.classesDir.parentFile.parentFile, "tmp/emma")
        ant.emma(enabled:"true"){
            new File("$buildDir/reports/emma").mkdirs()
            report(sourcepath: srcDir){
                fileset(dir: emmaInstDir.absolutePath){ include(name:"**/*.emma") }
                txt(outfile:"$buildDir/reports/emma/coverage.txt")
                html(outfile:"$buildDir/reports/emma/coverage.html")
                xml(outfile:"$buildDir/reports/emma/coverage.xml")
            }
        }
        def File reportFile = file("$buildDir/reports/emma/coverage.xml")
        def outputFactory = services.get(StyledTextOutputFactory).create("emma.test")
        if (reportFile.exists()) {
            outputFactory.withStyle(Style.Info).println("Test coverage reports available at $buildDir/reports/emma.")
            outputFactory.withStyle(Style.Normal).println("Text: file://$buildDir/reports/emma/coverage.txt")
            outputFactory.withStyle(Style.Info).println("Html: file://$buildDir/reports/emma/coverage.html")
            outputFactory.withStyle(Style.Normal).println("Xml:  file://$buildDir/reports/emma/coverage.xml")

            outputFactory.withStyle(Style.Normal).println("Analyzing test coverage...")
            def report = new XmlParser().parse(reportFile)
            def String coverage = report.data[0].all[0].coverage[3].@value
            def String[] splitted =coverage.split(" ");
            def Double actualCoverage = Double.parseDouble(splitted[0].replace("%", ""))
            if(actualCoverage < 95.0){
                outputFactory.withStyle(Style.Error).println("Line coverage was lower than expected (95.0), it was ${actualCoverage} so you need to work on this.")
            } else {
                outputFactory.withStyle(Style.Info).println("Line coverage was ${coverage}, good job!")
            }
        } else {
            outputFactory.withStyle(Style.Info).println("Seems that there was no coverage file, project '$project.name' might need some tests.")
        }
    }
}
