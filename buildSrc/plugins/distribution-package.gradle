import static org.gradle.logging.StyledTextOutput.Style

import org.gradle.api.file.FileTree
import org.gradle.api.tasks.bundling.Tar
import org.gradle.logging.StyledTextOutputFactory


task copyDistributionSourceJars {
    group = 'Distribution'
    description = "Copies project specific source jars to the distribution sources directory."
    doLast {
        def FileTree tree=fileTree("$projectDir")
        tree.include('**/build/libs/*-sources.jar')
        copy {
            from tree.getFiles()
            into 'distribution/sources'
        }
    }
}

task copyDistributionArchives(dependsOn: copyDistributionSourceJars) {
    group = 'Distribution'
    description = 'Copies project specific distribution archives to distribution.'
    doLast {
        def FileTree tree=fileTree("$projectDir")
        tree.include '**/build/distributions/*.zip'
        copy {
            from 'COPYING'
            from tree.getFiles()
            into 'distribution'
        }
    }
}

task archiveDistribution(type: Tar, dependsOn: copyDistributionArchives)  {
    group = 'Distribution'
    description = "Makes the distribution artifact and copies it to ${distributionDir}."
    outputs.upToDateWhen { false }
    def revision =""
    new ByteArrayOutputStream().withStream { os ->
        def result = exec {
            executable = 'svnversion'
            args = ['']
            standardOutput = os
        }
        revision = os.toString().trim()
    }
    def artifactRevision="${artifactVersion}-R${revision}"
    from 'distribution'
    destinationDir = file("${distributionDir}/artifact-${artifactRevision}")
    baseName = "perftence-distribution"
    version ="${artifactRevision}"
    extension = 'tar'
    doLast {
        def outputFactory = services.get(StyledTextOutputFactory).create("deployment.archiveDistribution")
        outputFactory.withStyle(Style.Info).println("Archived distribution package can be found from file://${destinationDir}/perftence-distribution-${artifactRevision}.tar")
    }
}

task copyDistributionFiles(dependsOn: archiveDistribution) {
    group = 'Distribution'
    description = "Copies the distribution artifact and copies it under ${distributionDir}."
    doLast {
        def revision =""
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                executable = 'svnversion'
                args = ['']
                standardOutput = os
            }
            revision = os.toString().trim()
        }

        def artifactRevision="${artifactVersion}-R${revision}"
        def targetDir ="${distributionDir}/distribution-${artifactRevision}"
        file("${targetDir}").mkdirs()

        outputs.upToDateWhen { false }

        copy {
            from 'distribution'
            into "${targetDir}"
        }
        def outputFactory = services.get(StyledTextOutputFactory).create("deployment.copyDistributionFiles")
        outputFactory.withStyle(Style.Info).println("Exploded path for the distribution can be found from file://${targetDir}")
    }
}

task makeDistributionPackage(dependsOn: [
    archiveDistribution,
    copyDistributionFiles ]
) {
    group = 'Distribution'
    description = "Makes the distribution package."
    doLast {
        delete("distribution")
        def outputFactory = services.get(StyledTextOutputFactory).create("deployment.makeDistributionPackage")
        outputFactory.withStyle(Style.Info).println( "Distribution package done.")
    }
}

