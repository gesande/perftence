import org.gradle.plugins.ide.eclipse.model.AbstractLibrary
import org.gradle.plugins.ide.eclipse.model.Classpath
import org.gradle.plugins.ide.eclipse.model.ClasspathEntry
import org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory


apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'java'

repositories {  flatDir { dirs 'lib' }  }

dependencies {
	compile gradleApi()
	compile localGroovy()
	compile project.fileTree(dir: 'lib', include: '*.jar', exclude: '*-sources.jar')
}

version = '2.0.0'

eclipse.classpath.defaultOutputDir = file('target/classes')

ext.buildLibrary='my-gradle-build-' + version

eclipse {
	classpath {
		file {
			whenMerged { Classpath cp ->
				String gradleHome = gradle.getGradleHomeDir().absolutePath.replace(File.separator, '/')
				String gradleSrc = "${gradleHome}/src"
				def entrySourcePath = new FileReferenceFactory().fromPath(gradleSrc)
				cp.entries.each { ClasspathEntry entry ->
					if ((entry in AbstractLibrary) && (entry.library.file.name.startsWith('gradle-'))) {
						entry.sourcePath = entrySourcePath
						println("Forked for patch for ${entry}")
					}
					if( ((entry in AbstractLibrary) && entry.library.file.name.startsWith(buildLibrary)) ) {
						entry.sourcePath = new FileReferenceFactory().fromPath("${projectDir}/lib-sources/${buildLibrary}-sources.jar")
						println("Forked for patch for ${buildLibrary}")
					}
				}
			}
		}
	}
}

