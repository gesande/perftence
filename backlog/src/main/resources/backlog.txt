Backlog for perftence test tool:

DONE:
+ created mainentrypoint-example project with source example #development-support 
+ add eclipse formatter settings under build project #ide
+ additional build scripts for source jars #development-support
+ additional build scripts for distribution #development-support
+ publish to sourceforge #development

IN PROGRESS:
- provide fluent based test examples with sources #development-support 

WAITING:
- provide agent based test examples with sources #development-support 
- provide distribution for test examples with sources #development-support
- upload test example distribution packages to project files (i.e. to source forge)
- fix the source packages for 3rd party lib #development-support
- move build.gradle & settings.gradle under build project #build
- make shell script library for build tasks #build 
- split fluent and agent stuff into separate projects #refactoring
  * may reflect to need of: separate 'perftence' and 'report' stuff 
- write unit tests for summary fields #tests
- one intermediate/summary statistics appender #refactoring
    * define each summary item as a separate "plugin" which is registered to one implementation
    --> one summary builder for agent and executable -based tests, each define their own summary "plugin"
- latency frequencies -> ability to set the range for the graph (e.g. using 99% percentile) #feature 
- statistics enhancement #feature
  * define a latency rate
  * print out statistics for latencies over the defined rate (statistics over statistics)
- change #refactoring
  * public interface DatasetAdapter<GRAPHDATA> { public void add(final Number x, final Number y);
  * to public interface DatasetAdapter<GRAPHDATA, CATEGORY> { public void add(final Number x, final CATEGORY y);
- ability to define the TPS is used (defining it before running the test) #feature 
  * e.g. running at 500 TPS (max) when the test is running  
